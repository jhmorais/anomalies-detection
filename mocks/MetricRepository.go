// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/jhmorais/anomalies-detection/internal/domain/entities"
	input "github.com/jhmorais/anomalies-detection/internal/usecases/ports/input"

	mock "github.com/stretchr/testify/mock"
)

// MetricRepository is an autogenerated mock type for the MetricRepository type
type MetricRepository struct {
	mock.Mock
}

// AddMetric provides a mock function with given fields: ctx, metric, attributeParent
func (_m *MetricRepository) AddMetric(ctx context.Context, metric []*input.Metric, attributeParent *string) error {
	ret := _m.Called(ctx, metric, attributeParent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*input.Metric, *string) error); ok {
		r0 = rf(ctx, metric, attributeParent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CleanMetricList provides a mock function with given fields:
func (_m *MetricRepository) CleanMetricList() {
	_m.Called()
}

// FindMetric provides a mock function with given fields: ctx, value, name
func (_m *MetricRepository) FindMetric(ctx context.Context, value float64, name string) (*entities.Metric, error) {
	ret := _m.Called(ctx, value, name)

	var r0 *entities.Metric
	if rf, ok := ret.Get(0).(func(context.Context, float64, string) *entities.Metric); ok {
		r0 = rf(ctx, value, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Metric)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, float64, string) error); ok {
		r1 = rf(ctx, value, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMetricByName provides a mock function with given fields: ctx, id
func (_m *MetricRepository) FindMetricByName(ctx context.Context, id string) (*entities.Metric, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Metric
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Metric); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Metric)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMetricByValue provides a mock function with given fields: ctx, value
func (_m *MetricRepository) FindMetricByValue(ctx context.Context, value float64) ([]*entities.Metric, error) {
	ret := _m.Called(ctx, value)

	var r0 []*entities.Metric
	if rf, ok := ret.Get(0).(func(context.Context, float64) []*entities.Metric); ok {
		r0 = rf(ctx, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Metric)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, float64) error); ok {
		r1 = rf(ctx, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMetric provides a mock function with given fields: ctx
func (_m *MetricRepository) ListMetric(ctx context.Context) ([]*entities.Metric, error) {
	ret := _m.Called(ctx)

	var r0 []*entities.Metric
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.Metric); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Metric)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMetricRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetricRepository creates a new instance of MetricRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetricRepository(t mockConstructorTestingTNewMetricRepository) *MetricRepository {
	mock := &MetricRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
