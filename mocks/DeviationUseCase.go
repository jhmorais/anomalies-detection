// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DeviationUseCase is an autogenerated mock type for the DeviationUseCase type
type DeviationUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, average
func (_m *DeviationUseCase) Execute(ctx context.Context, average float64) ([]int, error) {
	ret := _m.Called(ctx, average)

	var r0 []int
	if rf, ok := ret.Get(0).(func(context.Context, float64) []int); ok {
		r0 = rf(ctx, average)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, float64) error); ok {
		r1 = rf(ctx, average)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDeviationUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeviationUseCase creates a new instance of DeviationUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeviationUseCase(t mockConstructorTestingTNewDeviationUseCase) *DeviationUseCase {
	mock := &DeviationUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
